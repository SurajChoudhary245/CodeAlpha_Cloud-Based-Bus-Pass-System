import json
import pymysql
import uuid
from datetime import datetime

# RDS config (Don't hardcode in production — use AWS Secrets Manager)
rds_host = "ticket-system.c76w26iu0fnd.ap-south-1.rds.amazonaws.com"
db_username = "admin"
db_password = "yourpassword123"
db_name = "buspasssystem"

def lambda_handler(event, context):
    headers = {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type"
    }

    # ✅ CORS Preflight Handling
    if event.get("httpMethod") == "OPTIONS":
        return {
            "statusCode": 200,
            "headers": headers,
            "body": json.dumps({"message": "CORS preflight success"})
        }

    # ✅ Parse and validate request body
    try:
        body = json.loads(event.get('body', '{}'))
        print("Parsed body:", body)

        required_fields = ["name", "email", "pass_type", "from_location", "to_location", "valid_from", "valid_till"]
        missing = [field for field in required_fields if not body.get(field)]

        if missing:
            return {
                "statusCode": 400,
                "headers": headers,
                "body": json.dumps({
                    "status": "error",
                    "message": f"Missing required fields: {', '.join(missing)}"
                })
            }

        # Clean and prepare data
        name = body["name"].strip()
        email = body["email"].strip()
        pass_type = body["pass_type"].strip()
        from_location = body["from_location"].strip()
        to_location = body["to_location"].strip()

        # ✅ Convert dates to standard format if needed
        valid_from = datetime.strptime(body["valid_from"].strip(), "%Y-%m-%d").date()
        valid_till = datetime.strptime(body["valid_till"].strip(), "%Y-%m-%d").date()

    except Exception as e:
        print("Error parsing input:", str(e))
        return {
            "statusCode": 400,
            "headers": headers,
            "body": json.dumps({
                "status": "error",
                "message": "Invalid JSON input or date format",
                "error": str(e)
            })
        }

    # ✅ Connect to RDS MySQL
    try:
        conn = pymysql.connect(
            host=rds_host,
            user=db_username,
            password=db_password,
            database=db_name,
            connect_timeout=5
        )
        print("DB connection successful")
    except Exception as e:
        print("DB connection failed:", str(e))
        return {
            "statusCode": 500,
            "headers": headers,
            "body": json.dumps({
                "status": "error",
                "message": "Database connection failed",
                "error": str(e)
            })
        }

    # ✅ DB Insert Logic
    try:
        with conn.cursor() as cursor:
            # Check if pass already exists
            cursor.execute("""
                SELECT ticket_id FROM bus_passes 
                WHERE email = %s AND pass_type = %s AND valid_from = %s AND valid_till = %s
            """, (email, pass_type, valid_from, valid_till))

            if cursor.fetchone():
                return {
                    "statusCode": 409,
                    "headers": headers,
                    "body": json.dumps({
                        "status": "error",
                        "message": "❌ Pass already issued for this period."
                    })
                }

            # Generate a unique 8-character ticket ID
            ticket_id = str(uuid.uuid4())[:8]

            # Insert new pass
            cursor.execute("""
                INSERT INTO bus_passes 
                (ticket_id, name, email, pass_type, from_location, to_location, valid_from, valid_till)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            """, (ticket_id, name, email, pass_type, from_location, to_location, valid_from, valid_till))

            conn.commit()
            print("New pass issued:", ticket_id)

            return {
                "statusCode": 201,
                "headers": headers,
                "body": json.dumps({
                    "status": "success",
                    "message": "✅ Bus pass issued successfully",
                    "ticket_id": ticket_id
                })
            }

    except Exception as e:
        print("DB operation error:", str(e))
        return {
            "statusCode": 500,
            "headers": headers,
            "body": json.dumps({
                "status": "error",
                "message": "Failed to issue pass",
                "error": str(e)
            })
        }

    finally:
        conn.close()
